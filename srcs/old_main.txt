#include "../includes/fdf.h"

typedef struct s_map
{
	t_point			*point;
	struct s_map	*next;
}	t_map;

void	validate_argument(int argc, char *argv[])
{
	if (argc != 2)
	{
		ft_putendl_fd("Usage: ./fdf [map_name].fdf", STDERR_FILENO);
		exit(EXIT_FAILURE);
	}
	if (ft_strnstr(argv[1], ".fdf", ft_strlen(argv[1])) == NULL)
	{
		ft_putendl_fd("Unsupporeted file type", STDERR_FILENO);
		exit(EXIT_FAILURE);
	}
}

void	free_split(char **node)
{
	while (*node != NULL)
	{
		free(*node);
		node++;
	}
	free(node);
}

int	openfile(const char *filename)
{
	int	fd;

	fd = open(filename, O_RDONLY);
	if (fd == -1)
	{
		perror("fdf");
		exit(EXIT_FAILURE);
	}
	return (fd);
}

t_map	*map_new(int x, int y, int z, int color)
{
	
}

t_map	*parse_map(int fd)
{
	t_map	*map;
	char	*line;
	char	**split;
	size_t	i;

	line = get_next_line(fd);
	while (line != NULL)
	{
		split = ft_split(line, ' ');
		if (split == NULL)
			exit(EXIT_FAILURE);
		i = 0;
		while (split[i] != NULL)
		{

		}

		free(line);
	}

}

int	main(int argc, char *argv[])
{
	int	fd;
	char	*line;
	char	**split;
	t_map	*map;

	validate_argument(argc, argv);
	fd = openfile(argv[1]);

	line = get_next_line(fd);
}
